# -*- coding: utf-8 -*-
"""Data_Visualization_Assignmant.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LuBZY5bLI9m0ocLl7gQPMbRZ6EHhSStB

# **MATPLOTLIB ASSIGNMENT:**
"""

# Question:-1 Create a scatter plot using MAtplotlib to visualize relationship between two arrays x and y for the given data.
x = [1,2,3,4,5,6,7,8,9,10]
y = [2,4,5,7,6,8,9,10,12,13]
import pandas as pd
import matplotlib.pyplot as plt
plt.scatter(x,y)
plt.show()

# Question:- 2 Generate a line plot to visualize the trend of values for the given data.
import numpy as np
import matplotlib.pyplot as plt
data = np.array([3,7,9,15,22,29,35])
plt.plot(data)
plt.show()

# Question:- 3 Display a bar chart to represent the frequency of each item in the given array categories.
categories = ['A', 'B', 'C', 'D', 'E']
values = [25, 40, 30, 35, 20]
plt.bar(categories, values)
plt.show()

# Question:-4 Create a histogram to visualize the distribution of values in the array data.
data = np.random.normal(0, 1, 1000)
data =

plt.hist(data)
plt.show()

# Question:- 5 Show a pie chart to represent the percentage distribution of different sections in the array 'sections'.
sections = ['Section A', 'Section B', 'Section C', 'Section D']
sizes = [25, 30, 15, 30]
plt.pie(sizes, labels=sections, autopct='%1.1f%%')
plt.title("Pie Chart")
plt.show()

"""## **SEABORN ASSIGNMENT:**"""

# Question:-1 Create a scatter plot to visualize the relationship between two variables, by generating a synthetic dataset.
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import warnings
warnings.filterwarnings("ignore")
time = np.arange(400)
value = np.random.randn(400).cumsum()
df = pd.DataFrame({'time': time, 'value': value})
df

sns.scatterplot(x='time', y='value', data=df)
plt.show()

# Question:- 2 Generate a dataset of random numbers. Visualize the distribution of a numerical variable.
x = np.random.normal(size=100)
sns.distplot(x)
plt.show()

# Question:- 3  Create a dataset representing categories and their corresponding values. Compare different categories based on numerical values.
categories = ['Category A', 'Category B', 'Category C']
values = [10, 20, 15]
sns.barplot(x=categories, y=values)
plt.show()

# Question:- 4  Generate a dataset with categories and numerical values. Visualize the distribution of a numerical variable across different categories.
data = {'Category': ['A', 'B', 'A', 'B', 'A', 'B'],
        'Value': [10, 15, 20, 25, 30, 35]}
df = pd.DataFrame(data)
df
sns.boxplot(x='Category', y='Value', data=df)
plt.show()

# Question:- 5   Generate a synthetic dataset with correlated features. Visualize the correlation matrix of a dataset using a heatmap.
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

np.random.seed(42)

# Define feature means and standard deviations
means = [0, 0.5, 1, 1.5, 2]
stds = [1, 0.8, 0.6, 0.4, 0.2]

# Generate correlated features
X1 = np.random.normal(means[0], stds[0], 100)
X2 = 0.7 * X1 + np.random.normal(means[1], stds[1], 100)
X3 = 0.4 * X2 + np.random.normal(means[2], stds[2], 100)
X4 = 0.2 * X3 + np.random.normal(means[3], stds[3], 100)
X5 = 0.1 * X4 + np.random.normal(means[4], stds[4], 100)

# Create a Pandas DataFrame
df = pd.DataFrame({'X1': X1, 'X2': X2, 'X3': X3, 'X4': X4, 'X5': X5})

print(df.head())

# Calculate correlation matrix
corr_matrix = df.corr()

# Set up heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', square=True)

# Add title and labels
plt.title('Correlation Matrix Heatmap')
plt.xlabel('Features')
plt.ylabel('Features')

# Show plot
plt.show()

"""## **PLOTLY ASSIGNMENT:**"""

# Question:- 1  Using the given dataset, to generate a 3D scatter plot to visualize the distribution of data points in a threedimensional space.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings("ignore")
np.random.seed(30)
data = {
    'X': np.random.uniform(-10, 10, 300),
    'Y': np.random.uniform(-10, 10, 300),
    'Z': np.random.uniform(-10, 10, 300)
}
df = pd.DataFrame(data)
df

import plotly.graph_objects as go
import plotly.express as px
fig = go.Figure()
fig.add_trace(go.Scatter3d(x = df['X'], y = df['Y'], mode = 'markers', z = df['Z']))
fig.update_layout(title='3D Scatter Plot', scene=dict(xaxis_title='X', yaxis_title='Y', zaxis_title='Z'))

fig.show()

# Question:-2 Using the Student Grades, create a violin plot to display the distribution of scores across different grade categories.
import plotly.graph_objects as go
import plotly.express as px
np.random.seed(15)
data = {
    'Grade': np.random.choice(['A', 'B', 'C', 'D', 'F'], 200),
    'Score': np.random.randint(50, 100, 200)
}
df = pd.DataFrame(data)
df

import numpy as np
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

# Create sample data
np.random.seed(15)
data = {
    'Grade': np.random.choice(['A', 'B', 'C', 'D', 'F'], 200),
    'Score': np.random.randint(50, 100, 200)
}
df = pd.DataFrame(data)

# Create a violin plot
sns.catplot(x = 'Grade', y = 'Score', data = df, kind = 'violin')
plt.show()

# Question:-3 Using the sales data, generate a heatmap to visualize the variation in sales across different months and days.
np.random.seed(20)
data = {
    'Month': np.random.choice(['Jan', 'Feb', 'Mar', 'Apr', 'May'], 100),
    'Day': np.random.choice(range(1, 31), 100),
    'Sales': np.random.randint(1000, 5000, 100)
}
df = pd.DataFrame(data)
fig = px.imshow(df.pivot_table(index='Month', columns='Day', values='Sales'),
                 color_continuous_scale='YlGnBu',
                 title='Sales Heatmap')

# Customize the layout
fig.update_layout(xaxis_title='Day', yaxis_title='Month')
fig.show()

# Question:- 4 Using the given x and y data, generate a 3D surface plot to visualize the function
x = np.linspace(-5, 5, 100)
y = np.linspace(-5, 5, 100)
x, y = np.meshgrid(x, y)
z = np.sin(np.sqrt(x**2 + y**2))
data = {
    'X': x.flatten(),
    'Y': y.flatten(),
    'Z': z.flatten()
}
df = pd.DataFrame(data)
fig = px.scatter_3d(df, x='X', y='Y', z='Z', color='Z', opacity=0.7)
fig.update_layout(scene=dict(xaxis_title='X', yaxis_title='Y', zaxis_title='Z'))
fig.show()

# Question:- 5 Using the given dataset, create a bubble chart to represent each country's population (y-axis), GDP (xaxis), and bubble size proportional to the population.
np.random.seed(25)
data = {
    'Country': ['USA', 'Canada', 'UK',
'Germany', 'France'],
    'Population':
np.random.randint(100, 1000, 5),
    'GDP': np.random.randint(500, 2000,
5)
}
df = pd.DataFrame(data)
fig = px.scatter(df, x='GDP', y='Population', size='Population', color='Country',
                 title='Bubble Chart of Population vs. GDP')
fig.show()

"""# **BOKEH ASSIGNMENT:**"""

# Question:- 1 .Create a Bokeh plot displaying a sine wave. Set x-values from 0 to 10 and y-values as the sine of x.
#!pip install bokeh
import bokeh.io
import bokeh.plotting
bokeh.io.output_notebook()
from bokeh.plotting import figure, output_file, show
import numpy as np

# Generate x and y values for the sine wave
x = np.linspace(0, 10, 1000)
y = np.sin(x)

# Create a Bokeh figure
p = figure(title="Sine Wave", x_axis_label='x', y_axis_label='sin(x)')

# Add a line to the plot
p.line(x, y, line_width=2)

# Output the plot to an HTML file
output_file("sine_wave.html")

# Show the plot
show(p)

# Question:-2 .Create a Bokeh scatter plot using randomly generated x and y values. Use different sizes and colors for the markers based on the 'sizes' and 'colors' columns.
import numpy as np
from bokeh.plotting import figure, output_file, show
from bokeh.models import ColumnDataSource

# Generate random x and y values
N = 100
x = np.random.rand(N)
y = np.random.rand(N)

# Generate random sizes and colors
sizes = np.random.randint(10, 50, size=N)
colors = ["#%06x" % np.random.randint(0, 0xFFFFFF) for _ in range(N)]

# Create a ColumnDataSource to hold the data
source = ColumnDataSource(data={'x': x, 'y': y, 'sizes': sizes, 'colors': colors})

# Create a figure
p = figure(title="Random Scatter Plot", x_axis_label='x', y_axis_label='y')

# Add a scatter plot
p.circle(x='x', y='y', size='sizes', color='colors', source=source)

# Output the plot to an HTML file
output_file("scatter_plot.html")

# Show the plot
show(p)

# Question:- Generate a Bokeh bar chart representing the counts of different fruits using the following dataset.
fruits = ['Apples', 'Oranges', 'Bananas', 'Pears']
counts = [20, 25, 30, 35]
import pandas as pd
data = {'Fruit': fruits, 'Count': counts}
df = pd.DataFrame(data)
from bokeh.plotting import figure, output_file, show
from bokeh.models import ColumnDataSource
p = figure(x_range=fruits, title="Fruit Counts", x_axis_label='Fruit', y_axis_label='Count')
p.vbar(x='Fruit', top='Count', width=0.5, source=ColumnDataSource(df))
output_file("bar_chart.html")
show(p)

# Question:-4 Create a Bokeh histogram to visualize the distribution of the given data.
data_hist = np.random.randn(1000)
hist, edges = np.histogram(data_hist, bins=30)
from bokeh.plotting import figure, output_file, show
from bokeh.models import ColumnDataSource
p = figure(title="Histogram", x_axis_label='Value', y_axis_label='Frequency')
p.quad(top=hist, bottom=0, left=edges[:-1], right=edges[1:], fill_color="navy", line_color="white")
output_file("histogram.html")
show(p)

# Question:-5 Create a Bokeh heatmap using the provided dataset.
data_heatmap = np.random.rand(10, 10)
x = np.linspace(0, 1, 10)
y = np.linspace(0, 1, 10)
xx, yy = np.meshgrid(x, y)
import numpy as np
from bokeh.plotting import figure, output_file, show
from bokeh.models import ColumnDataSource
p = figure(title="Heatmap", x_axis_label='X', y_axis_label='Y')
p.image(image=[data_heatmap], x=[0], y=[0], dw=[1], dh=[1], palette="Viridis256")
output_file("heatmap.html")
show(p)